data.price = fread(file.path(directory,'original', '農產品交易行情.csv'), header=T) %>%
filter(作物名稱=='包心白菜-包頭蓮')
View(data.price)
data.price = fread(file.path(directory,'original', '農產品交易行情.csv'), header=T) %>%
filter(作物名稱=='包心白菜-成功白')
View(data.price)
#======================================================================================
# Step 2 : Get crop price
#======================================================================================
data.crop_ino = read.csv(file.path(directory,'use',"crop_info.csv"), header=T)
data.price = fread(file.path(directory,'original', '農產品交易行情.csv'), header=T) %>%
filter(作物代號 %in% data.crop_ino$作物代號)
unique(data.price$作物代號)
colnames(data.price)
date_max = max(data.price$Date)
date_min = min(data.price$Date)
date_min
date_max
cat('Date Max:', date_max )
cat('Date Max:', date_max, '  Date Min:', date_min )
seq(as.Date("2020-04-19"), as.Date("2020-04-29"))
seq(as.Date("2020-04-19"), as.Date("2020-04-29"),by='day')
seq(as.Date(date_max), as.Date(date_min),by='day')
seq(as.Date(date_max), as.Date(date_min),by='day')
seq(as.Date(date_min), as.Date(date_max),by='day')
# cat('Date Max:', date_max, '  Date Min:', date_min )
date_all = seq(as.Date(date_min), as.Date(date_max),by='day')
# cat('Date Max:', date_max, '  Date Min:', date_min )
date_all = data.frame( Date=seq(as.Date(date_min), as.Date(date_max),by='day'))
head(date_all)
head(data.price)
data.price = fread(file.path(directory,'original', '農產品交易行情.csv'), header=T) %>%
filter(作物代號 %in% data.crop_ino$作物代號) %>%
group_by(Date,作物代號,作物名稱) %>%
summarise_at(.vars=c('上價','下價','中價','平均價'),mean)
View(data.price)
test = fread(file.path(directory,'original', '農產品交易行情.csv'), header=T) %>%
filter(作物代號 == 'FB11')
View(test)
View(data.price)
View(data.price)
rm(test)
aa =data.price %>%
group_by(作物代號,作物名稱) %>%
aggregate(count = n())
aa =data.price %>%
group_by(作物代號,作物名稱) %>%
tally()
View(aa)
View(data.price)
View(aa)
#======================================================================================
# Step 1 : Setting Environment
#======================================================================================
#----------------------------------------------------
# Check Package (if didn't install yet then install those packages)
#----------------------------------------------------
packages.need <- c('tidyverse', 'data.table')
packages.download <- !packages.need %in% installed.packages()[,'Package']
if(any(packages.download))
install.packages(packages.need[packages.download],dependencies=TRUE)
#----------------------------------------------------
# Load packaes
#----------------------------------------------------
lapply(packages.need, require, character.only = TRUE)
#----------------------------------------------------
# File Setting
#----------------------------------------------------
directory = '/Users/sun/Desktop/AIGO/agricultural_product/data'
#======================================================================================
# Step 2 : Get crop price
#======================================================================================
data.crop_ino = read.csv(file.path(directory,'use',"crop_info.csv"), header=T)
data.price = fread(file.path(directory,'original', '農產品交易行情.csv'), header=T) %>%
filter(作物代號 %in% data.crop_ino$作物代號) %>%
group_by(Date,作物代號,作物名稱) %>%
summarise_at(.vars=c('上價','下價','中價','平均價'),mean)
#--------------- Count Each crop ---------------
##data.price %>%
##  group_by(作物代號,作物名稱) %>%
##  tally()
date_max = max(data.price$Date)
date_min = min(data.price$Date)
# cat('Date Max:', date_max, '  Date Min:', date_min )
date_all = data.frame( Date=seq(as.Date(date_min), as.Date(date_max),by='day'))
data.price %>%
group_by(作物代號,作物名稱) %>%
tally()
crop_count = data.price %>%
group_by(作物代號,作物名稱) %>%
tally()
crop_count
View(crop_count)
data.price %>%
filter(作物代號=='LB3')
aa = data.price %>%
filter(作物代號=='LB3')
View(aa)
aa = data.price %>%
filter(作物代號=='LC7')
View(aa)
data.all = left_join(date_all, data.price)
data.crop_ino = read.csv(file.path(directory,'use',"crop_info.csv"), header=T)
data.price = fread(file.path(directory,'original', '農產品交易行情.csv'), header=T) %>%
filter(作物代號 %in% data.crop_ino$作物代號) %>%
group_by(Date,作物代號,作物名稱) %>%
summarise_at(.vars=c('上價','下價','中價','平均價'),mean) %>%
select(Date = as.Date(Date), 作物代號,作物名稱,平均價)
data.price = fread(file.path(directory,'original', '農產品交易行情.csv'), header=T) %>%
filter(作物代號 %in% data.crop_ino$作物代號) %>%
group_by(Date,作物代號,作物名稱) %>%
summarise_at(.vars=c('上價','下價','中價','平均價'),mean) %>%
select(aaa = as.Date(Date), 作物代號,作物名稱,平均價)
data.crop_ino = read.csv(file.path(directory,'use',"crop_info.csv"), header=T)
data.price = fread(file.path(directory,'original', '農產品交易行情.csv'), header=T) %>%
filter(作物代號 %in% data.crop_ino$作物代號) %>%
group_by(Date,作物代號,作物名稱) %>%
summarise_at(.vars=c('上價','下價','中價','平均價'),mean) %>%
select(Date,作物代號,作物名稱,平均價)
str(data.price)
data.price = fread(file.path(directory,'original', '農產品交易行情.csv'), header=T) %>%
filter(作物代號 %in% data.crop_ino$作物代號) %>%
group_by(Date,作物代號,作物名稱) %>%
summarise_at(.vars=c('上價','下價','中價','平均價'),mean) %>%
select(Date,作物代號,作物名稱,平均價) %>%
mutate_at(vars("Date"),funs(as.numeric))
data.crop_ino = read.csv(file.path(directory,'use',"crop_info.csv"), header=T)
data.price = fread(file.path(directory,'original', '農產品交易行情.csv'), header=T) %>%
filter(作物代號 %in% data.crop_ino$作物代號) %>%
group_by(Date,作物代號,作物名稱) %>%
summarise_at(.vars=c('上價','下價','中價','平均價'),mean) %>%
select(Date,作物代號,作物名稱,平均價) %>%
mutate_at(vars("Date"),funs(as.Date))
data.price = fread(file.path(directory,'original', '農產品交易行情.csv'), header=T) %>%
filter(作物代號 %in% data.crop_ino$作物代號) %>%
group_by(Date,作物代號,作物名稱) %>%
summarise_at(.vars=c('上價','下價','中價','平均價'),mean) %>%
select(Date,作物代號,作物名稱,平均價) %>%
mutate_at(vars(Date),as.Date,format="%Y-%m-%d")
data.crop_ino = read.csv(file.path(directory,'use',"crop_info.csv"), header=T)
data.price = fread(file.path(directory,'original', '農產品交易行情.csv'), header=T) %>%
filter(作物代號 %in% data.crop_ino$作物代號) %>%
group_by(Date,作物代號,作物名稱) %>%
summarise_at(.vars=c('上價','下價','中價','平均價'),mean) %>%
select(Date,作物代號,作物名稱,平均價) %>%
mutate_at(vars(Date),as.Date, format="%Y-%m-%d")
data.price = fread(file.path(directory,'original', '農產品交易行情.csv'), header=T) %>%
filter(作物代號 %in% data.crop_ino$作物代號) %>%
group_by(Date,作物代號,作物名稱) %>%
summarise_at(.vars=c('上價','下價','中價','平均價'),mean) %>%
select(date = Date,作物代號,作物名稱,平均價) %>%
mutate_at(vars(Date), as.Date, format="%Y-%m-%d")
data.price = fread(file.path(directory,'original', '農產品交易行情.csv'), header=T) %>%
filter(作物代號 %in% data.crop_ino$作物代號) %>%
group_by(Date,作物代號,作物名稱) %>%
summarise_at(.vars=c('上價','下價','中價','平均價'),mean) %>%
select(date = Date,作物代號,作物名稱,平均價) %>%
mutate_at(vars(date), as.Date, format="%Y-%m-%d")
data.price = fread(file.path(directory,'original', '農產品交易行情.csv'), header=T) %>%
filter(作物代號 %in% data.crop_ino$作物代號) %>%
group_by(Date,作物代號,作物名稱) %>%
summarise_at(.vars=c('上價','下價','中價','平均價'),mean) %>%
ungroup() %>%
select(Date,作物代號,作物名稱,平均價) %>%
mutate_at(vars(Date), as.Date, format="%Y-%m-%d")
head(data.price)
data.all = left_join(date_all, data.price)
#======================================================================================
# Step 1 : Setting Environment
#======================================================================================
#----------------------------------------------------
# Check Package (if didn't install yet then install those packages)
#----------------------------------------------------
packages.need <- c('tidyverse', 'data.table')
packages.download <- !packages.need %in% installed.packages()[,'Package']
if(any(packages.download))
install.packages(packages.need[packages.download],dependencies=TRUE)
#----------------------------------------------------
# Load packaes
#----------------------------------------------------
lapply(packages.need, require, character.only = TRUE)
#----------------------------------------------------
# File Setting
#----------------------------------------------------
directory = '/Users/sun/Desktop/AIGO/agricultural_product/data'
test = fread(file.path(directory,'original', 'Rain_2018', 'AutoRain_201801.csv'))
head(test)
test = read.csv(file.path(directory,'original', 'Rain_2018', 'AutoRain_201801.csv'), header=T, encoding="big5")
?read.csv
test = read.csv(file.path(directory,'original', 'Rain_2018', 'AutoRain_201801.csv'), header=T, fileEncoding="big5")
head(test)
list.files(file.path(directory,'original', 'Rain_2018')
list.files(file.path(directory,'original', 'Rain_2018')
)
list.files(file.path(directory,'original', 'Rain_2018'))
colnames(test)
test2 = read.csv(file.path(directory,'original', 'Rain_2018', 'MetroRain_201801.csv'), header=T, fileEncoding="big5")
haed((test2))
haed(test2)
head(test2)
unique(test$ID)
test = read.csv(file.path(directory,'original', 'Rain_2018', 'AutoRain_201801.csv'), header=T, fileEncoding="big5", stringsAsFactors=F )
test2 = read.csv(file.path(directory,'original', 'Rain_2018', 'MetroRain_201801.csv'), header=T, fileEncoding="big5", stringsAsFactors=F)
unique(test$ID)
data.rain.hour_1998_2017 = fread(file.path(directory,'original', 'Rain_1998-2017.txt'), skip=78) %>%
setnames(. , c("stno","yyyymmddhh","PP01")) %>%
mutate( Date = as.Date(as.character(yyyymmddhh), format="%Y%m%d"),
Time = substr(as.character(yyyymmddhh),9,10)) %>%
filter( !PP01 %in% c(-9991, -9996, -9997, -9998, -9999) )
unique(data.rain.hour_1998_2017$stno)
summary(test2$DD_RMN)
#---------- 2018 ----------
file_2018 = list.files(file.path(directory,'original', 'Rain_2018'))
file_2018
data.rain.hour_2018 = NULL
?for
()
head(test)
head(test2)
temp = read.csv(file.path(directory,'original', 'Rain_2018', f_i), header=T, fileEncoding="big5", stringsAsFactors=F) %>%
mutate(Date = as.Date(substr(DTIME,1,10)) )
f_i = 1
temp = read.csv(file.path(directory,'original', 'Rain_2018', f_i), header=T, fileEncoding="big5", stringsAsFactors=F) %>%
mutate(Date = as.Date(substr(DTIME,1,10)) )
temp = read.csv(file.path(directory,'original', 'Rain_2018', file_2018[f_i]), header=T, fileEncoding="big5", stringsAsFactors=F) %>%
mutate(Date = as.Date(substr(DTIME,1,10)) )
head(temp)
temp = read.csv(file.path(directory,'original', 'Rain_2018', file_2018[f_i]), header=T, fileEncoding="big5", stringsAsFactors=F) %>%
mutate(Date = as.Date(substr(DTIME,1,10)),
Time = substr(DTIME,12,19))
temp = read.csv(file.path(directory,'original', 'Rain_2018', file_2018[f_i]), header=T, fileEncoding="big5", stringsAsFactors=F) %>%
mutate(Date = as.Date(substr(DTIME,1,10)),
Time = substr(DTIME,12,19))
head(temp)
temp = read.csv(file.path(directory,'original', 'Rain_2018', file_2018[f_i]), header=T, fileEncoding="big5", stringsAsFactors=F) %>%
mutate(Date = as.Date(substr(DTIME,1,10)),
Time = substr(DTIME,12,19))
select(Date, Time, stno=ID, PP01=R)
?colnames
temp = read.csv(file.path(directory,'original', 'Rain_2018', file_2018[f_i]), header=T, fileEncoding="big5", stringsAsFactors=F) %>%
setNames(c("DTIME", "stno", "c_stno", "PP01")) %>%
mutate(Date = as.Date(substr(DTIME,1,10)),
Time = substr(DTIME,12,19)) %>%
select(Date, Time, stno, PP01)
head( temp)
data.rain.hour_2018 = NULL
for (f_i in 1:length(file_2018)){
temp = read.csv(file.path(directory,'original', 'Rain_2018', file_2018[f_i]), header=T, fileEncoding="big5", stringsAsFactors=F) %>%
setNames(c("DTIME", "stno", "c_stno", "PP01")) %>%
mutate(Date = as.Date(substr(DTIME,1,10)),
Time = substr(DTIME,12,19)) %>%
select(Date, Time, stno, PP01) %>%
filter( !PP01 %in% c(-9991, -9996, -9997, -9998, -9999) )
data.rain.hour_2018 = rbind(data.rain.hour_2018, temp)
rm(temp)
}
temp = read.csv(file.path(directory,'original', "rain_201811.csv"), header=T, fileEncoding="big5", stringsAsFactors=F)
heaD(temp)
head(temp)
head(data.rain.hour_1998_2017)
aa = data.rain.hour_1998_2017 %>%  filter(stno=='01U460')
aa = data.rain.hour_1998_2017 %>%  filter(stno=='466880')
View(aa)
data.rain.day_1998_2017 = data.rain.hour_1998_2017 %>%
group_by(Date, stno) %>%
summarize(sum_PP01 = mean(PP01, na.rm=TRUE)) %>%
ungroup
data.rain.day_1998_2017 = data.rain.hour_1998_2017 %>%
group_by(Date, stno) %>%
summarize(sum_PP01 = sum(PP01, na.rm=TRUE)) %>%
ungroup() %>%
group_by(Date) %>%
summarize(precipitation = mean(sum_PP01, na.rm=TRUE)) %>%
select(Date, precipitation)
temp = read.csv(file.path(directory,'original', 'Rain_2018', file_2018[f_i]), header=T, fileEncoding="big5", stringsAsFactors=F) %>%
setNames(c("DTIME", "stno", "c_stno", "PP01")) %>%
mutate(Date = as.Date(substr(DTIME,1,10)),
Time = substr(DTIME,12,19)) %>%
select(Date, Time, stno, PP01)
?difftime
difftime(as.Date('1998-01-01'), as.Date('2017-12-31'), units = "days")
difftime(as.Date('2017-12-31'), as.Date('1998-01-01'), units = "days")
temp = read.csv(file.path(directory,'original', 'Rain_2018', file_2018[f_i]), header=T, fileEncoding="big5", stringsAsFactors=F) %>%
setNames(c("DTIME", "stno", "c_stno", "PP01")) %>%
mutate(Date = as.Date(substr(DTIME,1,10)),
Time = substr(DTIME,12,19)) %>%
select(Date, Time, stno, PP01)
rm(aa)
head(temp)
aa = temp %>% filter(stno == '46694')
View(aa)
aa = temp %>% filter(stno == '46688')
View(aa)
unique(temp$stno)
aa = temp %>% filter(stno == 'G2L02')
View(aa)
which(aa$PP01 <> 0)
which(aa$PP01 != 0)
file_2018[f_i]
f_i = 1
rm(temp)
temp = read.csv(file.path(directory,'original', 'Rain_2018', file_2018[f_i]), header=T, fileEncoding="big5", stringsAsFactors=F) %>%
setNames(c("DTIME", "stno", "c_stno", "PP01")) %>%
mutate(Date = as.Date(substr(DTIME,1,10)),
Time = substr(DTIME,12,19)) %>%
select(Date, Time, stno, PP01) %>%
filter( !PP01 %in% c(-9991, -9996, -9997, -9998, -9999) )
data.rain.hour_2018 = rbind(data.rain.hour_2018, temp)
unique(temp$stno)
aa = temp %>% filter(stno == 'C1U92')
which(aa$PP01 != 0)
View(aa)
temp = read.csv(file.path(directory,'original', 'rain_201811.csv'), header=T, fileEncoding="big5", stringsAsFactors=F)
View(temp)
aa = temp %>% filter(station_id == '01U470')
View(aa)
aa = temp %>% filter(station_id == '01U470')
10/11/2018 00:20:00
str(aa)
aa$obsTime[1]
strsplit(aa$obsTime[1], " ")
strsplit(aa$obsTime[1], " ")[[1]][1]
as.Date(strsplit(aa$obsTime[1], " ")[[1]][1], format='%d/%m/%Y')
aa = temp %>% filter(station_id == '01U470') %>%
mutate( Date = as.Date(strsplit(obsTime, " ")[[1]][1], format='%d/%m/%Y'),
Time = strsplit(obsTime, " ")[[1]][2])
View(aa)
colnames(aa )
aa = temp %>% filter(station_id == '01U470') %>%
mutate( Date = as.Date(strsplit(obsTime, " ")[[1]][1], format='%d/%m/%Y'),
Time = strsplit(obsTime, " ")[[1]][2]) %>%
select(stno=station_id, Date, Time, Now)
aa = temp %>% filter(station_id == '01U470') %>%
mutate( Date = as.Date(strsplit(obsTime, " ")[[1]][1], format='%d/%m/%Y'),
Time = strsplit(obsTime, " ")[[1]][2])
aa = temp %>% filter(station_id == '01U470') %>%
mutate( Date = as.Date(strsplit(obsTime, " ")[[1]][1], format='%d/%m/%Y'),
Time = strsplit(obsTime, " ")[[1]][2]) %>%
select( Date, Time, Now)
aa = temp %>% filter(station_id == '01U470') %>%
mutate( Date = as.Date(strsplit(obsTime, " ")[[1]][1], format='%d/%m/%Y'),
Time = strsplit(obsTime, " ")[[1]][2]) %>%
select(stno=station_id, Date, Time, NOW)
View(aa)
library(AzureRMR)
az <- create_azure_login()
az
library(AzureContainers)
deployresgrp <- AzureRMR::get_azure_login()$
get_subscription("4b17375d-57de-4803-a920-a7446a41ca4f")$
create_resource_group("deployrdockertest", location="USWest2")
install.packages('AzureContainers')
library(AzureRMR)
AzureR_dir()
library(AzureRMR)
az <- get_azure_login()
az$list_subscriptions()
az <- create_azure_login('2d6b2cb9-42eb-48dc-a679-694911f7626d')
az <- get_azure_login()
az$list_subscriptions()
az <- create_azure_login('2d6b2cb9-42eb-48dc-a679-694911f7626d')
az$list_subscriptions()
az <- get_azure_login('2d6b2cb9-42eb-48dc-a679-694911f7626d')
az$list_subscriptions()
deployresgrp <- AzureRMR::get_azure_login()$
get_subscription("4b17375d-57de-4803-a920-a7446a41ca4f")$
create_resource_group("deployrdockertest", location="USWest2")
deployresgrp <- AzureRMR::get_azure_login('2d6b2cb9-42eb-48dc-a679-694911f7626d')$
get_subscription("4b17375d-57de-4803-a920-a7446a41ca4f")$
create_resource_group("deployrdockertest", location="USWest2")
az$list_subscriptions()
deployresgrp <- AzureRMR::get_azure_login('2d6b2cb9-42eb-48dc-a679-694911f7626d')$
get_subscription("4b17375d-57de-4803-a920-a7446a41ca4f")$
create_resource_group("deployrdockertest", location="westus2")
# create container registry
deployreg_svc <- deployresgrp$create_acr("deployreg")
library(AzureContainers)
# create container registry
deployreg_svc <- deployresgrp$create_acr("deployreg")
??create_acr
deployresgrp
# create container registry
deployreg_svc <- deployresgrp$create_acr("deployreg")
# create container registry
deployresgrp$create_acr("deployreg")
rg <- get_azure_login('2d6b2cb9-42eb-48dc-a679-694911f7626d')$
get_subscription("4b17375d-57de-4803-a920-a7446a41ca4f")$
get_resource_group("deployrdockertest")
rg$create_acr("deployreg")
library(AzureRMR)
library(AzureContainers)
rg <- get_azure_login('2d6b2cb9-42eb-48dc-a679-694911f7626d')$
get_subscription("4b17375d-57de-4803-a920-a7446a41ca4f")$
get_resource_group("deployrdockertest")
rg$create_acr("deployreg")
rg$create_acr("deployregtest")
data(Boston, package="MASS")
library(randomForest)
# train a model for median house price as a function of the other variables
bos_rf <- randomForest(medv ~ ., data=Boston, ntree=100)
# save the model
saveRDS(bos_rf, "/Users/sun/Desktop/R_plumber_test/bos_rf.rds")
response <- httr::POST("http://localhost:8000/score",
body=list(df=MASS::Boston[1:10,]), encode="json")
response
httr::content(response, simplifyVector=TRUE)
# build image 'extension_docker'
call_docker("build -t extension_docker .")
?call_docker
getwd()
?setwd
setwd('/Users/sun/Desktop/R_plumber_test')
getwd()
# build image 'extension_docker'
call_docker("build -t bos_rf .")
# build image 'extension_docker'
call_docker("sudo build -t bos_rf .")
# build image 'extension_docker'
call_docker("build -t bos_rf .")
# build image 'extension_docker'
call_docker("build -t bos_rf .")
# build image 'extension_docker'
call_docker("build -t bos_rf .")
?get_acr
deployreg_svc = get_acr("deployregtest")
library(AzureContainers)
deployreg_svc = deployresgrp$get_acr("deployregtest")
deployreg_svc = rg$get_acr("deployregtest")
# upload the image to Azure
deployreg <- deployreg_svc$get_docker_registry(as_admin=TRUE)
deployreg$push("bos_rf")
deployaci <- rg$create_aci("deployaci",
image="deployregtest.azurecr.io/bos_rf",
registry_creds=deployreg,
cores=2, memory=8,
ports=aci_ports(8000))
response <- httr::POST("http://deployaci.westus2.azurecontainer.io:8000/score",
body=list(df=MASS::Boston[1:10,]), encode="json")
httr::content(response, simplifyVector=TRUE)
View(response)
bos_rf <- readRDS("bos_rf.rds")
library(randomForest)
df=MASS::Boston[1:10,]
predict(bos_rf, df)
getwd()
setwd('/Users/sun/Desktop/gcaa_plumber')
library(plumber)
# 'plumber.R' is the location of the file shown above
pr("combine_data.R") %>%
pr_run(port=8000)
library(plumber)
# 'plumber.R' is the location of the file shown above
pr("combine_data.R") %>%
pr_run(port=8000)
library(dplyr)
library(plumber)
# 'plumber.R' is the location of the file shown above
pr("combine_data.R") %>%
pr_run(port=8000)
library(plumber)
# combine_data.R
combine_df <- readRDS(file.path(directory, "combine_data .rds"))
#* @param taxno
#* @post /result
function(taxno)
{
subset(combine_df, TaxidNo=='53412591')
}
library(plumber)
# 'combine_data.R' is the location of the file shown above
pr("combine_data.R") %>%
pr_run(port=8000)
getwd()
pr <- plumber::plumb("/Users/sun/Desktop/gcaa_plumber/combine_data.R")
pr <- plumber::plumb("/Users/sun/Desktop/gcaa_plumber/combine_data.R")
pr <- plumber::plumb("/Users/sun/Desktop/gcaa_plumber/combine_data.R")
pr <- plumber::plumb("combine_data.R")
pr$run()
pr <- plumber::plumb("combine_data.R")
pr$run()
pr <- plumber::plumb("combine_data.R")
pr$run()
library(AzureRMR)
library(AzureContainers)
deployresgrp <- AzureRMR::get_azure_login('2d6b2cb9-42eb-48dc-a679-694911f7626d')$
get_subscription("4b17375d-57de-4803-a920-a7446a41ca4f")$
create_resource_group("gcaadeploy", location="westus2")
gcaagrp <- get_azure_login('2d6b2cb9-42eb-48dc-a679-694911f7626d')$
get_subscription("4b17375d-57de-4803-a920-a7446a41ca4f")$
get_resource_group("gcaadeploy")
gcaa_svc = gcaagrp$create_acr("gcaaregistry")
setwd('/Users/sun/Desktop/gcaa_plumber')
gcaa_svc = gcaagrp$create_acr("gcaaregistry")
?create_acr
setwd('/Users/sun/Desktop/gcaa_plumber')
call_docker("build -t gcaa_plumber .")
# upload the image to Azure
gcaareg <- gcaa_svc$get_docker_registry(as_admin=TRUE)
gcaareg$push("gcaa_plumber")
gcaaaci <- gcaagrp$create_aci("gcaaaci",
image="gcaaregistry.azurecr.io/gcaa_plumber",
registry_creds=gcaareg,
cores=2, memory=8,
ports=aci_ports(8000))
gcaaaci <- gcaagrp$create_aci("gcaaaci",
image="gcaaregistry.azurecr.io/gcaa_plumber",
registry_creds=gcaareg,
cores=2, memory=8,
ports=aci_ports(8000))
response <- httr::POST("http://gcaaaci.westus2.azurecontainer.io:8000/result",
body=list(taxno='68387705'), encode="json")
httr::content(response, simplifyVector=TRUE)
